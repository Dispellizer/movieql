graphql-yoga는 create-react-app과 비슷하게 GraphQL 프로젝트를 빠르게 시작할수 있다.

git init .
git remote add origin https://github.com/Dispellizer/movieql
git pull origin master

GraphQL로 해결할수 있는 문제들
Over-fetching - 요청한 영역의 정보보다 많은 정보를 서버에서 받는것
나는 성만 필요한데 이름, 직장, 전화번호 등등을 보내주는것
이것을 성만 요구할수 있다.

Under-fetching
인스타 그램의 경우 실행하면 3가지 요청이 실행됨
/feed/
/notifications/
/user/1/
요청이 3번 오고 가야 앱이 시작된다.
rest에서 하나를 완성하려고 많은 소스를 요청하게 된다. 
한 query에 정확하게 원하는 정보만 받을수 있도록 할수있다.

query {
    feed {
        comments
        likeNumber
    }
    notifications {
        isRead
    }
    user {
        username
        profilePic
    }
}

{
    feed: [
        {
            comments: 1,
            likeNumber: 20
        }
    ],
    notifications: [
        {
            isRead: true
        },
        {
            isRead: false
        }
    ],
    user: {
        username: "Dispel"
        profile: "http"
    }
}
위가 graphQL query, 아래가 자바스크립트에서 받는것

npm i graphql-yoga

npm i nodemon -g
npm i babel-node --dev
npm i babel-cli -g --ignore-engines
npm i babel-cli babel-preset-env babel-preset-stage-3 --dev

schema.graphql
여기에 사용자가 뭘 할지에 대해서 정의를 한다.
db에서 정보를 얻는걸 Query라 부름 --> 정보를 받을때만 쓰임
Mutation은 정보를 변형할때(db, 메모리에서 정보를 바꾸는 작업을 할때)

resolvers는 query를 해결하는것
query는 db에게는 문제같은것, 우리는 이 query를 어떤방식으로 resolve해야한다.

Operation(db.js)에서 data가 어떻게 보일지 정의하고
질문을 resolve(해결)하는 함수를 만든다.

schema.graphql 에서 무슨 일이 벌어지는지 설명
resolvers.js에서 함수로 이를 실행시킴

mutation은 db의 상태가 변할때 사용하는것

영화 정보를 받을때 Query,
DB의 상태를 바꿀때 Mutation

npm i node-fetch